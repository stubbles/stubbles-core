<?php
/**
 * This file is part of stubbles.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @package  stubbles
 */
namespace stubbles\lang\reflect;
/**
 * CallMap trait for classes generated by NewInstance.
 *
 * @since  6.0.0
 */
trait CallMap
{
    /**
     * map of method with closures to call instead
     *
     * @type  array
     */
    private $callMap   = [];
    /**
     * map of calls per method
     *
     * @type  array
     */
    private $callCount = [];

    /**
     * sets the call map to use
     *
     * @param   array  $callMap
     * @return  $this
     */
    public function mapCalls(array $callMap)
    {
        $this->callMap = $callMap;
        return $this;
    }

    /**
     * handles actual method calls
     *
     * @param   string   $method
     * @param   mixed[]  $arguments
     * @return  mixed
     */
    protected function handleMethodCall($method, $arguments)
    {
        $this->countCall($method);
        if (isset($this->callMap[$method])) {
            if (is_callable($this->callMap[$method])) {
                return call_user_func_array($this->callMap[$method], $arguments);
            }

            return $this->callMap[$method];
        }

        if (is_callable('parent::' . $method)) {
            return call_user_func_array('parent::' . $method, $arguments);
        }

        return null;
    }

    /**
     * counts method call for given method
     *
     * @param  string  $method
     */
    private function countCall($method)
    {
        if (!isset($this->callCount[$method])) {
            $this->callCount[$method] = 0;
        }

        $this->callCount[$method]++;
    }

    /**
     * returns amount of calls received for given method
     *
     * @param   string  $method  name of method to check
     * @return  int
     */
    public function callsReceivedFor($method)
    {
        if (isset($this->callCount[$method])) {
            return $this->callCount[$method];
        }

        return 0;
    }
}
